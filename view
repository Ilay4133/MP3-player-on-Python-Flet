import flet as ft
from registration_and_login import *
from registration_and_login_elements import *

def main(page: ft.Page):
    page.scroll = "always"
    page.title = "Регистрация"
    page.bgcolor='#0b012e'
    page.vertical_alignment = ft.MainAxisAlignment.CENTER  # Центрирование по вертикали
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER  # Центрирование по горизонтали
    page.pading=ft.padding.all(100)
    page.update()

    def snack_bar_open():
        page.snack_bar = ft.SnackBar(ft.Text(value="Вы не заполнили все поля", color='#e8eee7'), bgcolor='#0c3348')
        page.snack_bar.open = True
        page.update()

    def snack_bar_open_whod():
        page.snack_bar = ft.SnackBar(ft.Text(value="Нет такого пользователя", color='#e8eee7'), bgcolor='#0c3348')
        page.snack_bar.open = True
        page.update()

    def snack_bar_open_reg():
        page.snack_bar = ft.SnackBar(ft.Text(value="Такой пользователь уже есть", color='#e8eee7'), bgcolor='#0c3348')
        page.snack_bar.open = True
        page.update()

    class Open_reg():
        def open_user_panel(self):
            print("User panel")

        def open_admin_panel(self):
            print("Admin panel")

        def open_reg_window(e):
            reg_column.visible = True
            go_to_reg.visible = False
            go_to_vhod.visible = False
            back_start_but.visible = True
            vhod_in_text.visible = False
            page.update()

        def open_vhod_window(e):
            Close_reg.close_reg_window(1)
            vhod_column.visible = True
            go_to_reg.visible = False
            go_to_vhod.visible = False
            back_start_but.visible = True
            vhod_in_text.visible = False
            page.update()

        def open_vhod_window_lambda(e):
            global new_user_enter
            new_user_enter = 1
            Open_reg.open_vhod_window(1)
            close = lambda: page.close(dlg_reg)
            close()
            page.update()

    class Close_reg():
        def close_all(self):
            go_to_reg.visible = False
            vhod_in_text.visible = False
            go_to_vhod.visible = False
            back_start_but.visible = False

        def close_dlg(e):
            close = lambda: page.close(dlg_reg)
            close()

        def close_reg_window(e):
            name_field_reg.value = None
            last_name_field_reg.value = None
            otchestvo_field_reg.value = None
            pas_field_reg.value = None
            mail_field.value = None
            age_field_reg.value = None
            city_field_reg.value = None
            pol_vebor.value = None
            reg_column.visible = False
            page.update()

        def close_vhod_wind(self):
            name_field_login.value = None
            pas_field_login.value = None
            vhod_column.visible = False
            page.update()

        def back_start(self):
            Close_reg.close_reg_window(1)
            Close_reg.close_vhod_wind(1)
            go_to_reg.visible = True
            vhod_in_text.visible = True
            go_to_vhod.visible = True
            back_start_but.visible = False
            page.update()

    def view_login(e):
        login_stat = login(1, name_field_login, pas_field_login)
        if login_stat == "snack_bar_open_whod":
            snack_bar_open_whod()
        elif login_stat == "open_admin_panel":
            Open_reg.open_admin_panel(1)
        elif login_stat == "open_user_panel":
            Open_reg.open_user_panel(1)

    def view_registration(e):
        registration_stat = registration(1, name_field_reg, last_name_field_reg, otchestvo_field_reg, pas_field_reg,
                                        age_field_reg, mail_field, pol_vebor, city_field_reg)
        if registration_stat == "snack_bar_open":
            snack_bar_open()
        elif registration_stat == "open_dialg":
            open_dlg = lambda: page.open(dlg_reg)
            open_dlg()
        elif registration_stat == "snack_bar_open_reg":
            snack_bar_open_reg()

    # Элементы страницы регистрации
    reg_but = ft.ElevatedButton(content=ft.Text(value="Зарегистрироваться", color='#e8eee7',style=ft.TextStyle(size=17)),
                                on_click=view_registration,
                                bgcolor='#036380', style=ft.ButtonStyle(overlay_color='#0ba6bf'),width=200,height=35)
    dlg_reg = ft.AlertDialog(
        modal=True,
        title=ft.Text("Подтвердите пожалуйста",color='#e8eee7'),
        content=ft.Text("Хотите перейти ко входу?",color='#e8eee7'),
        actions=[
            ft.TextButton(text="Да", on_click=Open_reg.open_vhod_window_lambda,
                          style=ft.ButtonStyle(color='#e8eee7', bgcolor='#036380', overlay_color='#0ba6bf')),
            ft.TextButton(text="Нет", on_click=Close_reg.close_dlg,
                          style=ft.ButtonStyle(color='#e8eee7', bgcolor='#036380', overlay_color='#0ba6bf'))],
        actions_alignment=ft.MainAxisAlignment.END, bgcolor='#012f4a')

    reg = ft.Column([reg_text, name_field_reg, last_name_field_reg, otchestvo_field_reg, pas_field_reg, mail_field,
                     age_field_reg, pol_vebor, city_field_reg,
                     reg_but], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
    reg_column = ft.Container(content=reg, alignment=ft.alignment.center, expand=True)

    # Элементы страницы входа
    vhod_but = ft.ElevatedButton(content=ft.Text(value="Вход", color='#e8eee7',style=ft.TextStyle(size=17)),
                                 on_click=view_login, bgcolor='#036380',
                                 style=ft.ButtonStyle(overlay_color='#0ba6bf'),width=200,height=35)
    vhod = ft.Column([vhod_text, name_field_login, pas_field_login, vhod_but], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
    vhod_column = ft.Container(content=vhod, alignment=ft.alignment.center, expand=True)

    # Элементы начальной страницы
    vhod_in_text = ft.Text(value="Уже есть аккаунт?",style=ft.TextStyle(size=18,weight=ft.FontWeight.BOLD),color='#0ba6bf')
    go_to_reg = ft.ElevatedButton(content=ft.Text(value="Регистрация", color='#e8eee7',style=ft.TextStyle(size=17)), on_click=Open_reg.open_reg_window,
                                  bgcolor='#036380', style=ft.ButtonStyle(elevation=None, overlay_color='#0ba6bf'),width=155)
    go_to_vhod = ft.ElevatedButton(content=ft.Text(value="Войти ", color='#e8eee7',style=ft.TextStyle(size=17)), on_click=Open_reg.open_vhod_window,
                                   style=ft.ButtonStyle(elevation=None, overlay_color='#0ba6bf'),width=135,bgcolor='#231c3b')
    back_start_but = ft.ElevatedButton(content=ft.Text(value="Назад", color='#e8eee7',style=ft.TextStyle(size=17)), on_click=Close_reg.back_start,
                                       bgcolor='#036380', style=ft.ButtonStyle(elevation=None, overlay_color='#0ba6bf'),width=200,height=35)

    start = ft.Column([go_to_reg, vhod_in_text, go_to_vhod, back_start_but], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER)
    start_column = ft.Container(content=start, alignment=ft.alignment.center, expand=True)

    # Добавление всех контейнеров на страницу
    page.add(ft.Column([vhod_column, reg_column, start_column], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER, expand=True))
    Close_reg.back_start(1)
    page.update()

    # Элементы домашней страницы (страницы с песнями)________________________
    page_selecter_but=ft.CupertinoSlidingSegmentedButton(width=1600,height=50,
        bgcolor='#0b012e',thumb_color='#160454',on_change=None,
        controls=[
        ft.Text(value="Песни",size=40,color='#688fa4'),
        ft.Text(value="Плейлисты",size=40,color='#688fa4'),
        ft.Text(value="Папки",size=40,color='#688fa4'),
        ft.Text(value="Альбомы",size=40,color='#688fa4'),
        ft.Text(value="Артисты",size=40,color='#688fa4'),
        ft.Text(value="Жанры",size=40,color='#688fa4')])

    vert_divider_home_menu=ft.VerticalDivider(width=20)
    vert_divider_songs_menu = ft.VerticalDivider(width=935)
    divider_homa_page=ft.Divider(height=20,thickness=1,color='#0ba6bf')

    search_icon_but=ft.IconButton(icon=ft.Icons.SEARCH_SHARP,icon_size=50,icon_color='#0ba6bf',tooltip="Поиск в библиотеке")
    design_icon_but=ft.IconButton(icon=ft.Icons.COLOR_LENS_ROUNDED,icon_size=50,icon_color='#0ba6bf',tooltip="Изменить тему")
    menu_icon_but=ft.IconButton(icon=ft.Icons.MENU_OPEN_SHARP,icon_size=50,icon_color='#0ba6bf',tooltip="Меню")
    songs_list_icon_but=ft.IconButton(icon=ft.Icons.FORMAT_LIST_NUMBERED,icon_size=50,icon_color='#0ba6bf',tooltip="Выбрать песни")
    sorting_icon_but=ft.IconButton(icon=ft.Icons.ALT_ROUTE_SHARP,icon_size=50,icon_color='#0ba6bf',tooltip="Сортировать")

    reproduce_icon=ft.Icon(name=ft.Icons.PLAY_ARROW_ROUNDED,color='#e3a112',size=45)
    reproduce_text=ft.Text(value="Воспроизвести",size=32,color='#e8eee7')
    reproduce_but=ft.ElevatedButton(content=ft.Row([reproduce_icon,reproduce_text]),bgcolor='#01315c',
                                      height=55,width=310)

    random_sort_icon = ft.Icon(name=ft.Icons.SHUFFLE_SHARP, color='#e3a112', size=45)
    random_sort_text = ft.Text(value="Перемешать", size=32, color='#e8eee7')
    random_sort_but = ft.ElevatedButton(content=ft.Row([random_sort_icon, random_sort_text]), bgcolor='#01315c',
                                        height=55, width=270)

    songs_count_text=ft.Text(value="X Песен",size=31,color='#e8eee7')
    songs_count_text_cont=ft.Container(content=songs_count_text,padding=ft.Padding(top=0,left=15,right=0,bottom=0))

    songs_home_column=ft.Column([],scroll=ft.ScrollMode.ALWAYS)

    home_menus_buttons=ft.Row([menu_icon_but,design_icon_but,search_icon_but,vert_divider_home_menu,page_selecter_but])
    songs_menus_elements=ft.Row([songs_count_text_cont,vert_divider_songs_menu,random_sort_but,reproduce_but,sorting_icon_but,songs_list_icon_but])

    home_page_column=ft.Column([home_menus_buttons,divider_homa_page,songs_menus_elements,songs_home_column])
    page.add(home_page_column)
    page.update()
    page.padding=ft.Padding(top=40,left=30,right=30,bottom=0)
    page.update()


ft.app(target=main)
